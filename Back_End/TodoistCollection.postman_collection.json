{
	"info": {
		"_postman_id": "329f6fb0-3fa4-4d29-b97a-99019da984ee",
		"name": "TodoistCollection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Tasks",
			"item": [
				{
					"name": "Get active tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15592140-9d35-42d6-875b-70bbcba6a441",
								"exec": [
									"const schema ={",
									"    \"type\": \"array\",",
									"    \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"id\": {\"type\": \"number\"},",
									"            \"project_id\": {\"type\": \"number\"},",
									"            \"section_id\": {\"type\": \"number\"},",
									"            \"order\": {\"type\": \"number\"},",
									"            \"content\": {\"type\": \"string\"},",
									"            \"completed\": {\"type\": \"boolean\"},",
									"            \"label_ids\": {\"type\": \"array\"},",
									"            \"priority\": {\"type\": \"number\"},",
									"            \"comment_count\": {\"type\": \"number\"},",
									"            \"created\": {\"type\": \"string\"},",
									"            \"url\": {\"type\": \"string\"}",
									"        },",
									"    }",
									"};",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenValue}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.todoist.com/rest/v1/tasks",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53759309-54ab-419b-a9c1-9adb1e01899a",
								"exec": [
									"const schema ={",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": {\"type\": \"number\"},",
									"        \"project_id\": {\"type\": \"number\"},",
									"        \"section_id\": {\"type\": \"number\"},",
									"        \"order\": {\"type\": \"number\"},",
									"        \"content\": {\"type\": \"string\"},",
									"        \"completed\": {\"type\": \"boolean\"},",
									"        \"label_ids\": {\"type\": \"array\"},",
									"        \"priority\": {\"type\": \"number\"},",
									"        \"comment_count\": {\"type\": \"number\"},",
									"        \"created\": {\"type\": \"string\"},",
									"        \"url\": {\"type\": \"string\"}",
									"    },",
									"        \"required\": [\"id\", \"project_id\", \"section_id\", \"order\", \"content\", \"completed\", \"label_ids\", \"priority\", \"comment_count\", \"created\", \"url\"]",
									"};",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"postman.setEnvironmentVariable(\"CurrentTaskID\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenValue}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Request-Id",
								"value": "{{$randomUUID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"PostmanTask{{$randomUUID}}\",\n    \"project_id\": {{QABuddiesProjectID}}\n}"
						},
						"url": {
							"raw": "https://api.todoist.com/rest/v1/tasks",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an active task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa03bea1-3c23-40e8-b207-5a3ab435fbf9",
								"exec": [
									"const schema ={",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": {\"type\": \"number\"},",
									"        \"project_id\": {\"type\": \"number\"},",
									"        \"section_id\": {\"type\": \"number\"},",
									"        \"order\": {\"type\": \"number\"},",
									"        \"content\": {\"type\": \"string\"},",
									"        \"completed\": {\"type\": \"boolean\"},",
									"        \"label_ids\": {\"type\": \"array\"},",
									"        \"priority\": {\"type\": \"number\"},",
									"        \"comment_count\": {\"type\": \"number\"},",
									"        \"created\": {\"type\": \"string\"},",
									"        \"url\": {\"type\": \"string\"}",
									"    },",
									"        \"required\": [\"id\", \"project_id\", \"section_id\", \"order\", \"content\", \"completed\", \"label_ids\", \"priority\", \"comment_count\", \"created\", \"url\"]",
									"};",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenValue}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.todoist.com/rest/v1/tasks/{{CurrentTaskID}}",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"tasks",
								"{{CurrentTaskID}}"
							]
						},
						"description": "Retrieve acrive task given a Task ID"
					},
					"response": []
				},
				{
					"name": "Update a task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b9a4ed90-3b56-4a3b-94c4-d011aa7c464d",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenValue}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Request-Id",
								"value": "{{$randomUUID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"UPDATED PostmanTask{{$randomUUID}}\"\n}"
						},
						"url": {
							"raw": "https://api.todoist.com/rest/v1/tasks/{{CurrentTaskID}}",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"tasks",
								"{{CurrentTaskID}}"
							]
						},
						"description": "Update task values given a Task ID"
					},
					"response": []
				},
				{
					"name": "Close a task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8ebd229-d4e4-4d68-8b3c-aedc28ec21c6",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenValue}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.todoist.com/rest/v1/tasks/{{CurrentTaskID}}/close",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"tasks",
								"{{CurrentTaskID}}",
								"close"
							]
						},
						"description": "Close a tast given a Task ID"
					},
					"response": []
				},
				{
					"name": "Reopen a task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f68b04f2-1046-4819-9f99-52c07aa241e0",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenValue}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.todoist.com/rest/v1/tasks/{{CurrentTaskID}}/reopen",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"tasks",
								"{{CurrentTaskID}}",
								"reopen"
							]
						},
						"description": "Reopen a task given a Task ID"
					},
					"response": []
				},
				{
					"name": "Delete a task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "128b4004-6a38-4403-8f75-0aed0e36ce4b",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenValue}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://api.todoist.com/rest/v1/tasks/{{CurrentTaskID}}",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"tasks",
								"{{CurrentTaskID}}"
							]
						},
						"description": "Delete a task given a Task ID"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Projects",
			"item": [
				{
					"name": "Get all projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "211afa8d-3c6f-4b1a-8158-789f0ee542d9",
								"exec": [
									"const schema ={",
									"    \"type\": \"array\",",
									"    \"minItems\": 1,",
									"    \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"id\": {\"type\": \"number\"},",
									"            \"order\": {\"type\": \"number\"},",
									"            \"color\": {\"type\": \"number\"},",
									"            \"name\": {\"type\": \"string\"},",
									"            \"comment_count\": {\"type\": \"number\"},",
									"            \"shared\": {\"type\": \"boolean\"},",
									"            \"inbox_project\": {\"type\": \"boolean\"}",
									"        },",
									"        \"required\": [",
									"            \"id\",",
									"            \"color\",",
									"            \"name\",",
									"            \"comment_count\",",
									"            \"shared\"",
									"        ]",
									"    }",
									"};",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenValue}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.todoist.com/rest/v1/projects",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  a new project",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1f34365-7010-4946-8ace-22cded60af54",
								"exec": [
									"const schema ={",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": {\"type\": \"number\"},",
									"        \"order\": {\"type\": \"number\"},",
									"        \"color\": {\"type\": \"number\"},",
									"        \"name\": {\"type\": \"string\"},",
									"        \"comment_count\": {\"type\": \"number\"},",
									"        \"shared\": {\"type\": \"boolean\"}",
									"    },",
									"        \"required\": [\"id\", \"name\", \"order\", \"comment_count\"]",
									"};",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"postman.setEnvironmentVariable(\"CurrentProjectID\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenValue}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Request-Id",
								"value": "{{$randomUUID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"PostmanProject{{$randomUUID}}\"\n}"
						},
						"url": {
							"raw": "https://api.todoist.com/rest/v1/projects",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"projects"
							]
						},
						"description": "Create a new project"
					},
					"response": []
				},
				{
					"name": "Get a project",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd9db377-a697-4bec-94d2-0450c396a201",
								"exec": [
									"const schema ={",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": {\"type\": \"number\"},",
									"        \"order\": {\"type\": \"number\"},",
									"        \"color\": {\"type\": \"number\"},",
									"        \"name\": {\"type\": \"string\"},",
									"        \"comment_count\": {\"type\": \"number\"},",
									"        \"shared\": {\"type\": \"boolean\"}",
									"    },",
									"        \"required\": [\"id\", \"name\", \"order\", \"comment_count\"]",
									"};",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenValue}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.todoist.com/rest/v1/projects/{{CurrentProjectID}}",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"projects",
								"{{CurrentProjectID}}"
							]
						},
						"description": "Retrieve a project given a Proejct ID"
					},
					"response": []
				},
				{
					"name": "Update a project",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62ad76ec-855d-4d2b-bd0c-c3e16ca8a2fb",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenValue}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Request-Id",
								"value": "{{$randomUUID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"PostmanProject{{$randomUUID}} updated{{$randomUUID}} \"\n}"
						},
						"url": {
							"raw": "https://api.todoist.com/rest/v1/projects/{{CurrentProjectID}}",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"projects",
								"{{CurrentProjectID}}"
							]
						},
						"description": "Change values en a project given the Project ID"
					},
					"response": []
				},
				{
					"name": "Delete a project",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b822a505-b2ef-4ee7-8879-89392938de44",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenValue}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://api.todoist.com/rest/v1/projects/{{CurrentProjectID}}",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"projects",
								"{{CurrentProjectID}}"
							]
						},
						"description": "Delete a project given a Project ID"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}